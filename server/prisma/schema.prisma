generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int          @id @default(autoincrement())
  createdAt        DateTime     @default(now())
  name             String
  email            String       @unique
  password         String
  pushSubscription Json?
  profileImageUrl  String?
  referrerId       Int?
  deletedAt        DateTime?
  authProvider     AuthProvider @default(EMAIL)
  authProviderId   String?
  passkeyOptions   Json?
}

model Passkey {
  id             String            @id @unique
  publicKey      Bytes
  userId         Int
  webauthnUserID String
  counter        BigInt
  deviceType     PasskeyDeviceType
  backedUp       Boolean
  transports     String?
  user           ActiveUser        @relation(fields: [userId], references: [id])
}

model Relation {
  id          Int         @id @default(autoincrement())
  fromUserId  Int
  toUserId    Int
  isAccepted  Boolean     @default(true)
  isFollowing Boolean     @default(false)
  pokes       Poke[]      @relation("relation-poke")
  pokeds      Poke[]      @relation("relation-poked")
  fromUser    ActiveUser? @relation("user-from", fields: [fromUserId], references: [id])
  toUser      ActiveUser? @relation("user-to", fields: [toUserId], references: [id])

  @@unique([fromUserId, toUserId])
}

model Poke {
  id                Int         @id @default(autoincrement())
  createdAt         DateTime    @default(now())
  payload           Json
  fromUserId        Int
  toUserId          Int
  relationId        Int
  reverseRelationId Int
  relation          Relation    @relation("relation-poke", fields: [relationId], references: [id])
  reverseRelation   Relation    @relation("relation-poked", fields: [reverseRelationId], references: [id])
  fromUser          ActiveUser? @relation("user-poke", fields: [fromUserId], references: [id])
  toUser            ActiveUser? @relation("user-poked", fields: [toUserId], references: [id])
}

view ActiveUser {
  id               Int          @unique
  createdAt        DateTime
  name             String
  email            String       @unique
  password         String
  pushSubscription Json?
  profileImageUrl  String?
  referrerId       Int?
  deletedAt        DateTime?
  authProvider     AuthProvider
  authProviderId   String?
  passkeyOptions   Json?
  pokes            Poke[]       @relation("user-poke")
  pokeds           Poke[]       @relation("user-poked")
  goingRelations   Relation[]   @relation("user-from")
  comingRelations  Relation[]   @relation("user-to")
  Passkey          Passkey[]
}

enum AuthProvider {
  EMAIL
  INSTAGRAM
}

enum PasskeyDeviceType {
  singleDevice
  multiDevice
}
